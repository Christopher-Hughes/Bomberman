REQUIRED SOFTWARE COMPONENTS.
board support - STM32F746NG, STM32F746G-Discovery
drivers - basic I/O, SDRAM, touchscreen
graphic lcd - graphic lcd
touchscreen - touchscreen
CMSIS - core
RTOS API - keil rtx
device - startup
STM32...Framework - classic
STM32...HAL - common, cortex, DMA, GPIO, I2C, LDTC, PWR, RCC, SDRAM, UART

REQUIRED ADDITIONAL STEPS.
Select ST-Link as debugger. In RTX_Conf_CM.C change thread stack sizes from 50 to 1024, and
change OS_CLOCK to 200000000 (not the correct way but it slows the game speed down for now).

UPDATE LOG.
31/3/16
Added game structs to keep project vaguely object-oriented - Jack
Added useful constants - Jack
Added enum types for game objects - Jack
Added 2 dimensional array (y/x) for storing tiles - Jack
Added place and draw tile grid code to game_init function - Jack
Added place player code to init function - Jack
Added enemy placement function - Jack
Added enemy movement function - Jack
Added player movement AI for testing function - Jack
Added player movement function - Jack
Added collision code to player and enemy move functions - Jack
Added touch screen control listener function - Jack
Added drop bomb function - Jack
Added bomb explode function - Jack
Added basic UI function - Jack
Added draw tile function - Jack
Added player movement thread - Jack
Added enemy movement thread - Jack
Added controls listener thread - Jack
Added bomb thread - Jack
Added signal bomb thread function - Jack

5/4/16 - Jack
Added drawAtPixel function, renamed drawRect to drawAtCoords
Updated player and enemy movements to move pixel by pixel
Updated redraw code to handle player moving over bomb
Moved repeating code in playerMove to updatePlayer function
Moved repeating code in enemyMove to updateEnemy function
Renamed playerMove and enemyMove to movePlayer and moveEnemies

7/4/16 - Chris
Created bitmaps for most objects in game
Updated updatePlayer & game_init
created methods drawIntPlayer & drawPlayer to mimic drawAtCoords & drawAtPixels respectively

TO DO.
Handle redrawing when enemies pass over each other or bomb. Already handled with player, use similar function.
Or, bomb and other enemies block enemy movement. Easier.
Clean up player and enemy move functions, DRY.
Add door and power up objects.
Add bitmaps.
Change movement to move pixel by pixel. Should player be constrained to tile centres after completing a move?
Make sure bomb drops centred on tile relative to player position.
Redraw conrol areas into more suitable shapes i.e. hollow circle split into areas.
Use mutexes and mailbox? Seems to work fine without.
Malloc and free everything to preserve memory?
Add audio?
Add timer?
Add lives?
Add difficulty modifiers for levels?
Add game over, game start, stage screens?
Add points?
Make multiplayer?

BUGS.
1. Bomb thread continues after player death and any pending explosions will appear after level reset.

TESTING.




